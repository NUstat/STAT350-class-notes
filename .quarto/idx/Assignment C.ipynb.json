{"title":"Assignment C","markdown":{"yaml":{"title":"Assignment C","format":{"html":{"toc":true,"toc-title":"Contents","code-fold":"show","self-contained":true}},"jupyter":"python3"},"headingText":"Instructions","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n1. You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. \n\n2. Do not write your name on the assignment.\n\n3. Write your code in the *Code* cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\n\n4. Use [Quarto](https://quarto.org/docs/output-formats/html-basics.html) to print the *.ipynb* file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: `quarto render filename.ipynb --to html`. Submit the HTML file.\n\n5. There are 5 points for clealiness and organization. The breakdow is as follows:\n\n- Must be an HTML file rendered using Quarto (1.5 pts).  \n\n- There aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\n\n- There is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)\n\n- The code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc. (1.5 pts)\n\n6. The assignment is worth 100 points, and is due on **29th April 2023 at 11:59 pm**. \n\n## GDP of The USA\nUSA's GDP per capita from 1960 to 2021 is given by the tuple `T` in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. \n\n### Gaps\nUse list comprehension to produce a list of the gaps between consecutive entries in `T`, i.e, the increase in GDP per capita with respect to the previous year. The list with gaps should look like: [60, 177, ...].\n\n*(6 points)*\n\n### Maximum gap size\nUse the list developed in C.1.1 to find the maximum gap size, i.e, the maximum increase in GDP per capita.\n\n*(2 points)*\n\n### Gaps higher than \\$1000\nUsing list comprehension with the list developed in C.1.1, find the percentage of gaps that have size greater than $1000.\n\n*(6 points)*\n\n### Dictionary\nCreate a dictionary `D`, where the `key` is the year, and `value` for the `key` is the increase in GDP per capita in that year with respect to the previous year, i.e., the gaps computed in C.1.1. \n\n*(6 points)*\n\n### Maximum increase\nUse the dictionary `D` to find the year when the GDP per capita increase was the maximum as compared to the previous year. Use the list comprehension method.\n\n*(6 points)*\n\n**Hint:** [...... for .... in D.items() if ......]\n\n### GDP per capita decrease\nUse the dictionary `D` to find the years when the GDP per capita decreased with respect to the previous year. Use the list comprehension method.\n\n*(6 points)*\n\n## Ted Talks\n### Reading data\nRead the file *TED_Talks.json* on ted talks using the code below. You will get the data in the object `TED_Talks_data`. Just look at the data structure of `TED_Talks_data`. You will need to know how the data is structured in lists/dictionaries to answer the questions below.\n\nNote that the data must be stored in the same directory as the notebook.\n\n*(2 points)*\n\n### Number of talks\nFind the number of talks in the dataset.\n\n*(2 points)*\n\n### Popular talk\nFind the `headline`, `speaker` and `year_filmed` of the talk with the highest number of `views`.\n\n*(6 points)*\n\n### Mean and median views\nWhat are the mean and median number of `views` for a talk? Can we say that the majority of talks (i.e., more than 50% of the talks) have less `views` than the average number of `views` for a talk? Justify your answer.\n\n*(6 points)*\n\n### Views vs average views\nDo at least 25% of the talks have more `views` than the average number of `views` for a talk? Justify your answer.\n\n*(4 points)*\n\n### `Confusing` talks\nFind the `headline` of the talk that received the highest number of votes in the `Confusing` category.\n\n*(8 points)*\n\n### `Fascinating` talks\nFind the `headline` and the `year_filmed` of the talk that received the highest percentage of votes in the *Fascinating* category. \n\n$$\\text{Percentage of } \\textit{Fascinating} \\text{ votes for a ted talk} = \\frac{Number \\ of \\  votes \\ in \\ the \\ Fascinating \\ category \\ }{Total \\ votes \\ in \\ all  \\ categories}$$\n\n*(10 points)*\n\n## Poker\n\nThe object `deck` defined below corresponds to a deck of cards. Estimate the probability that a five card hand will be:\n\n1. Straight\n\n2. Three-of-a-kind \n\n3. Two-pair\n\n4. One-pair\n\n5. High card\n\nYou may check the meaning of the above terms [here](https://en.wikipedia.org/wiki/List_of_poker_hands).\n\n*(25 points)*\n\n**Hint:**\n\nEstimate these probabilities as follows.\n\n1. Write a function that accepts a hand of 5 cards as argument, and returns relevant characterisitics of a hand, such as the number of distinct card values, maximum occurences of a value etc. Using the values returned by this function (may be in a dictionary), you can compute if the hand is of any of the above types *(Straight / Three-of-a-kind / two-pair / one-pair / high card)*. \n\n\n2. Randomly pull a hand of 5 cards from the `deck`. Call the function developed in (1) to get the relevant characteristics of the hand. Use those characteristics to determine if the hand is one of the five mentioned types *(Straight / Three-of-a-kind / two-pair / one-pair / high card)*. \n\n\n3. Repeat (2) 10,000 times.\n\n\n4. Estimate the probability of the hand being of the above five mentioned types *(Straight / Three-of-a-kind / two-pair / one-pair / high card)* from the results of the 10,000 simulations.\n\nYou may use the function `shuffle()` from the library `random` to shuffle the deck everytime before pulling a hand of 5 cards.\n\n**You don't need to stick to the hint if you feel you have a better way to do it.** In case you have a better way, you can claim 10 bonus points for this assignment.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"self-contained":true,"output-file":"Assignment C.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","bibliography":["references.bib"],"theme":"cosmo","title":"Assignment C","jupyter":"python3","toc-title":"Contents"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"Assignment C.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","title":"Assignment C","jupyter":"python3"},"extensions":{"book":{}}}}}