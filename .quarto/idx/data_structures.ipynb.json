{"title":"Data structures","markdown":{"yaml":{"title":"Data structures","format":{"html":{"toc-depth":4,"code-fold":false}},"jupyter":"python3"},"headingText":"Tuple","containsRefs":false,"markdown":"\n\nIn this chapter we'll learn about the python data structures that are often used or appear while analyzing data.\n\n\nTuple is a sequence of python objects, with two key characeterisics: (1) the number of objects are fixed, and (2) the objects are immutable, i.e., they cannot be changed.\n\nTuple can be defined as a sequence of python objects separated by commas, and enclosed in rounded brackets (). For example, below is a tuple containing three integers.\n\nWe can check the data type of a python object using the *type()* function. Let us check the data type of the object *tuple_example*.\n\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple *tuple_example* can be extracted as follows:\n\nNote that an element of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple *tuple_example*.\n\nThe above code results in an error as tuple elements cannot be modified.\n\n### Practice exercise 1\n\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Print the years in which the GDP per capita of the US increased by more than 10%.\n\n**Solution:**\n\n### Concatenating tuples\n\nTuples can be concatenated using the + operator to produce a longer tuple:\n\nMultiplying a tuple by an integer results in repetition of the tuple:\n\n### Unpacking tuples\n\nIf tuples are assigned to an expression containing multiple variables, the tuple will be unpacked and each variable will be assigned a value as per the order in which it appears. See the example below.\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let's say we are interested in retrieving only the first and the last two values of the tuple:\n\n### Practice exercise 2\n\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\n\nWrite a function that has two parameters:\n\n1. Year : which indicates the year from which the GDP per capita are available in the second parameter\n2. Tuple of GDP per capita's: Tuple consisting of GDP per capita for consecutive years starting from the year mentioned in the first parameter.\n\nThe function should return a tuple of length two, where the first element of the tuple is the number of years when the increase in GDP per capita was more than 5%, and the second element is the most recent year in which the GDP per capita increase was more than 5%.\n\nCall the function to find the number of years, and the most recent year in which the GDP per capita increased by more than 5%, since the year 2000. Assign the `number of years` returned by the function to a variable named `num_years`, and assign the most recent year to a variable named `recent_year`. Print the values of `num_years` and `recent_year`.\n\n**Solution:**\n\n### Tuple methods\n\nA couple of useful tuple methods are `count`, which counts the occurences of an element in the tuple and `index`, which returns the position of the first occurance of an element in the tuple: \n\nNow that we have an idea about tuple, let us try to think where it can be used.\n\n## List\n\nList is a sequence of python objects, with two key characeterisics that differentiates it from tuple: (1) the number of objects are variable, i.e., objects can be added or removed from a list, and (2) the objects are mutable, i.e., they can be changed.\n\nList can be defined as a sequence of python objects separated by commas, and enclosed in square brackets []. For example, below is a list consisting of three integers.\n\n### Adding and removing elements in a list\n\nWe can add elements at the end of the list using the *append* method. For example, we append the string 'red' to the list *list_example* below.\n\nNote that the objects of a list or a tuple can be of different datatypes.\n\nAn element can be added at a specific location of the list using the *insert* method. For example, if we wish to insert the number 2.32 as the second element of the list *list_example*, we can do it as follows:\n\nFor removing an element from the list, the *pop* and *remove* methods may be used. The *pop* method removes an element at a particular index, while the *remove* method removes the element's first occurence in the list by its value. See the examples below.\n\nLet us say, we need to remove the third element of the list. \n\nLet us say, we need to remove the element 'red'.\n\nFor removing multiple elements in a list, either `pop` or `remove` can be used in a `for` loop, or a `for` loop can be used with a condition. See the examples below.\n\nLet's say we need to remove integers less than 100 from the following list.\n\n$\\color{red}{\\text{Q1}}$: What's the need to define a new variable `list\\_example3\\_filtered` in the above code?\n\n$\\color{blue}{\\text{A1}}$: Replace list_example3_filtered with list_example3 and identify the issue.\n\n### List comprehensions\n\nList comprehension is a compact way to create new lists based on elements of an existing list or other objects.\n\n**Example:** Create a list that has squares of natural numbers from 5 to 15.\n\n**Example:** Create a list of tuples, where each tuple consists of a natural number and its square, for natural numbers ranging from 5 to 15.\n\n### Practice exercise 3\n\nBelow is a list consisting of responses to the question: \"At what age do you think you will marry?\" from students of the STAT303-1 Fall 2022 class.\n\n**Use list comprehension to:**\n\n#### \nRemove the elements that are not integers - such as *'probably never', '30+'*, etc. What is the length of the new list?\n\n**Hint:** The built-in python function of the `str` class - [isdigit()](https://docs.python.org/3/library/stdtypes.html#string-methods) may be useful to check if the string contains only digits.\n\n#### \nCap the values greater than 80 to 80, in the clean list obtained in (1). What is the mean age when people expect to marry in the new list?\n\n#### \nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\n### Concatenating lists\nAs in tuples, lists can be concatenated using the + operator:\n\nFor adding elements to a list, the `extend` method is preferred over the `+` operator. This is because the `+` operator creates a new list, while the `extend` method adds elements to an existing list. Thus, the `extend` operator is more memory efficient.\n\n### Sorting a list\n\nA list can be sorted using the `sort` method:\n\n### Slicing a list\n\nWe may extract or update a section of the list by passing the starting index (say `start`) and the stopping index (say `stop`) as `start:stop` to the index operator []. This is called *slicing* a list. For example, see the following example. \n\nLet us extract a slice containing all the elements from the the 3rd position to the 7th position. \n\nNote that while the element at the `start` index is included, the element with the `stop` index is excluded in the above slice.\n\nIf either the `start` or `stop` index is not mentioned, the slicing will be done from the beginning or until the end of the list, respectively.\n\nTo slice the list relative to the end, we can use negative indices:\n\nAn extra colon (':') can be used to slice every ith element of a list.\n\n### Practice exercise 4\n\nStart with the list [8,9,10]. Do the following:\n\n#### \nSet the second entry (index 1) to 17\n\n#### \nAdd 4, 5, and 6 to the end of the list\n\n#### \nRemove the first entry from the list\n\n#### \nSort the list\n\n#### \nDouble the list (concatenate the list to itself)\n\n#### \nInsert 25 at index 3\n\nThe final list should equal [4,5,6,25,10,17,4,5,6,10,17]\n\nNow that we have an idea about lists, let us try to think where it can be used.\n\nNow that we have learned about lists and tuples, let us compare them. \n\n$\\color{red}{\\text{Q2}}$: A list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?\n\n$\\color{blue}{\\text{A2}}$: The additional flexibility of a list comes at the cost of efficiency. Some of the advatages of a tuple over a list are as follows:\n\n1. Since a list can be extended, space is over-allocated when creating a list. A tuple takes less storage space as compared to a list of the same length. \n\n2. Tuples are not copied. If a tuple is assigned to another tuple, both tuples point to the same memory location. However, if a list is assigned to another list, a new list is created consuming the same memory space as the orignial list.\n\n3. Tuples refer to their element directly, while in a list, there is an extra layer of pointers that refers to their elements. Thus it is faster to retrieve elements from a tuple.\n\nThe examples below illustrate the above advantages of a tuple.\n\n## Dictionary\n\nA dictionary consists of key-value pairs, where the keys and values are python objects. While values can be any python object, keys need to be immutable python objects, like strings, integers, tuples, etc. Thus, a list can be a value, but not a key, as elements of a list can be changed. A dictionary is defined using the keyword `dict` along with curly braces, colons to separate keys and values, and commas to separate elements of a dictionary:\n\nElements of a dictionary can be retrieved by using the corresponding key.\n\n### Adding and removing elements in a dictionary\n\nNew elements can be added to a dictionary by defining a key in square brackets and assiging it to a value:\n\nElements can be removed from the dictionary using the `del` method or the `pop` method:\n\nNew elements can be added, and values of exisiting keys can be changed using the `update` method:\n\n### Iterating over elements of a dictionary\n\nThe [items()](https://docs.python.org/3/tutorial/datastructures.html#looping-techniques) attribute of a dictionary can be used to iterate over elements of a dictionary. \n\n### Practice exercise 5\n\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the dictionary `D` given in the code cell below.\n\nFind:\n\n1. The GDP per capita in 2015\n2. The GDP per capita of 2014 is missing. Update the dictionary to include the GDP per capita of 2014 as the average of the GDP per capita of 2013 and 2015.\n3. Impute the GDP per capita of other missing years in the same manner as in (2), i.e., as the average GDP per capita of the previous year and the next year. Note that the GDP per capita is not missing for any two consecutive years.\n4. Print the years and the imputed GDP per capita for the years having a missing value of GDP per capita in (3).\n\n**Solution:**\n\n### Practice exercise 6\n\nThe object `deck` defined below corresponds to a deck of cards. Estimate the probablity that a five card hand will be a [flush](https://en.wikipedia.org/wiki/Flush_(cards)), as follows:\n\n1. Write a function that accepts a hand of 5 cards as argument, and returns whether the hand is a flush or not.\n2. Randomly pull a hand of 5 cards from the deck. Call the function developed in (1) to determine if the hand is a flush.\n3. Repeat (2) 10,000 times.\n4. Estimate the probability of the hand being a flush from the results of the 10,000 simulations.\n\nYou may use the function [shuffle()](https://docs.python.org/3/library/random.html) from the `random` library to shuffle the deck everytime before pulling a hand of 5 cards.\n\n**Solution:**\n\n## Practice exercise 7\n\nThe code cell below defines an object having the nutrition information of drinks in starbucks. Assume that the manner in which the information is structured is consistent throughout the object.\n\nUse the object above to answer the following questions:\n\n### \nWhat is the datatype of the object?\n\n#### \nIf the object in (1) is a dictionary, what is the datatype of the values of the dictionary?\n\n#### \nIf the object in (1) is a dictionary, what is the datatype of the elements within the values of the dictionary?\n\n#### \nHow many calories are there in `Iced Coffee`?\n\n#### \nWhich drink(s) have the highest amount of protein in them, and what is that protein amount?\n\n#### \nWhich drink(s) have a fat content of more than 10g, and what is their fat content?\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc-depth":4,"output-file":"data_structures.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","bibliography":["references.bib"],"theme":"cosmo","title":"Data structures","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"data_structures.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","title":"Data structures","jupyter":"python3"},"extensions":{"book":{}}}}}