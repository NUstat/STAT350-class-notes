{
  "hash": "4424aee9a1999888a39fd949dfc92580",
  "result": {
    "markdown": "---\ntitle: \"Variables, expression and statements: R\"\nformat:\n  html:\n    toc: true\n    self-contained: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Data Types\n\nSome of the commonly used objects in R are numbers - integer and double (or numeric), character and logical (TRUE/FALSE). The data type of the object can be identified using the in-built R function `class()`. For example, see the following objects and their types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(4.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass('4')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Variable names\n\nWe have the following rules for a R variable name:\n\n- A variable name must start with a letter and can be a combination of letters, digits, period(.) and underscore(_). If it starts with period(.), it cannot be followed by a digit.\n- A variable name cannot start with a number or underscore (_)\n- Variable names are case-sensitive (age, Age and AGE are three different variables)\n- Reserved words cannot be used as variables (TRUE, FALSE, NULL, if...)\n\n## Converting datatypes\n\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called `annual_income` in the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_income = \"80000\"\n```\n:::\n\n\nSuppose we wish to divide `annual_income` by 12 to get the monthly income. We cannot use the variable `annual_income` directly as its datatype is a string and not a number. Thus, numerical operations cannot be performed on the variable `annual_income`.\n\nWe’ll need to convert annual_income to an integer. For that we will use the R’s in-built as.integer() function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_income = as.integer(annual_income)\nmonthly_income = annual_income/12\nprint(paste0(\"monthly income = \", monthly_income))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"monthly income = 6666.66666666667\"\n```\n:::\n:::\n\n\nSimilarly, datatypes can be converted from one type to another using in-built R functions as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Converting integer to character\nas.character(9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Converting character to numeric\nas.numeric('9.4')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Converting logical to integer\nas.numeric(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreeting = \"hello\"\n```\n:::\n\n\nHowever, strings can be concatenated using the `paste0()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste0(\"hello\", \" there!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello there!\"\n```\n:::\n:::\n\n\nR’s in-built readline() function can be used to accept an input from the user. For example, suppose we wish the user to input their age:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage = readline(\"Enter your age:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnter your age:\n```\n:::\n:::\n\n\nThe entered value is stored in the variable `age` and can be used for computation.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}