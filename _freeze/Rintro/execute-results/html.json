{
  "hash": "f7e1b18eec56acaf632dfb8470776106",
  "result": {
    "markdown": "---\ntitle: \"R: Introduction\"\nformat:\n    html:\n      toc: true\n      self-contained: true\n      default-image-extension: png\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Installing R\n\nGo to the The Comprehensive R Archive Network (CRAN): https://cran.r-project.org/\n\n![CRAN](Rcran.jpg)\n\nUnder \"Download and Install R,\" choose \"Linux,\" \"MacOS X\" or \"Windows.\" If you choose Windows, on the next page choose \"base,\" and on the following page choose \"Download R 4.3.1 for Windows\" to download the setup program.\n\nIf you choose MacOS X or Linux you will need to read through the instructions to find the downloads you need for your machine.\n\nOnce you have downloaded the setup program, execute it and follow the instructions for installing R on your system. If you have an earlier version of R already installed, you may continue to use it, or you can uninstall it and then install the most recent version, which is R 4.3.1.\n\n## Installing RStudio\n\nhttps://rstudio.com/products/rstudio/download/\n\nChoose your version: RStudio Desktop, Open Source License, Free. After you install RStudio, you can double click on it and open:\n\n![R Studio](Rstudio.jpg)\n\nUsually you will want to import data from a file corresponding to data associated with a homework problem.  Such a file will usually end with the extensions *\\*.txt* or *\\*.dat*.  The data files for this course will always be available on the CD that comes with the text and/or on the course web page.  A data file will consist of columns of numbers, with nothing separating the columns but “white space.”  If each column has a title on top describing what the data in the column represents (e.g., `age`, `weight`, `income`, etc.), we will say that the file has a *header*.  \n\n## Working directory\n\nThe easiest way to import the data into R and have it readily available for the current and future sessions is to first save the data file into your working directory.  For example mine is `C:\\stat350`. \n\nTo set up the working directory, select the project option by choosing `File` menu,  then `New Project`, and then `Create Project from Existing Directory`.\n\nTo start writing a new R script, navigate to the `New File` option in the `File` menu, and select `Quarto Document`. This will create a *\\*.qmd* file. You can write both code and formatted-text in this document. When working on assignment / exam problems, you will work on the *\\*.qmd* file, render it as HTML and then submit. You can view some examples on how to write R code and text in a *\\*.qmd* file and render it as HTML [here](https://quarto.org/docs/computations/r.html).\n\nFor rough work, i.e., work that won't be graded, you may use the `R script` option to write code.\n\n## Getting started with code\n\n### Reading data\n\nSuppose you want to work with the data from Problem 19 of Chapter 1, which is in a file named `CH01PR19.txt` which you have saved from the CD or the course web page in the `Datasets` folder within your R working directory. Assume the file has no header.  You will want to create a Table object in R containing this data.  First choose an appropriate name for the table.  Assume you choose to name it `Data`.  Then, you can execute the following code :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData <- read.table(\"./Datasets/CH01PR19.txt\")\n```\n:::\n\n\nThen there will be a Table object in R named `Data` containing the data in rows and columns.  To view it, you would type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData\n```\n:::\n\n\nHowever, if it is a large file, you might not be able to view the whole table at once.  In that case, you may use the `head()` function, which will display only the first 6 rows of `Data`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     V1 V2\n1 3.897 21\n2 3.885 14\n3 3.778 28\n4 2.540 22\n5 3.028 21\n6 3.865 31\n```\n:::\n:::\n\n\nNote that, in the absence of a header, the columns will be named `V1`, `V2`, etc., and the rows will be numbered.\n\nNow if the file does have a header *(which you may have added yourself)*, you need to change the above command to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData <- read.table(\"CH01PR19.txt\", header=TRUE)\n```\n:::\n\n\nIn this case, when you view the file you will see the title for each column at the top of each column instead of `V1`, `V2`, etc.  R regards these titles as names for the columns, and not as data.\n\nIf you want to load the data file from some other directory, you need to type the full path name in the `read.table()` command. For instance,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData <- read.table(file=\"C:/stat350/CH01PR19.txt\", header=FALSE) \n```\n:::\n\n\nYou may read data manually as well. Here both `Return` and `New` are vectors. \n\n::: {.cell}\n\n```{.r .cell-code}\nReturn <- c(74,66,81,52,73,62,52,45,62,46,60,46,38)\nNew <-c(5,6,8,11,12,15,16,17,18,18,19,20,20)\n```\n:::\n\n\n### Renaming columns\n\nNow suppose the file Data has two columns, and the first column is the `GPA`, while the second column is `ACT score`. If you would like to rename the columns in your R data table so that each column has a descriptive title, you could give the R command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(Data) <- c(\"GPA\", \"ACT\")\n```\n:::\n\n\nThen when you view the file the titles of the columns will have the new names you assigned:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    GPA ACT\n1 3.897  21\n2 3.885  14\n3 3.778  28\n4 2.540  22\n5 3.028  21\n6 3.865  31\n```\n:::\n:::\n\n\nNote that you can also give the columns these titles in the data file before you load it into R, and then use the `header = TRUE` setting when loading.  Also,  to avoid errors, you should never include a space in the title of any column\n\n### Exporting data\n\nSuppose you wish to export `Data` to file `Intro.csv` in your folder. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(Data, \"C:/stat350/Intro.csv\", col.names=TRUE, sep=\",\")\n```\n:::\n\n\nSuppose you wish to export `Data` to `Intro.txt` with a tab delimiter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(Data, \"C:/stat350/Intro.txt\", col.names=TRUE, sep=\"\\t\")\n```\n:::\n\n\nYou may export R objects to other file types in a similar manner.\n\n### R environment\n\n\nIf you want to see which R objects are currently in your R environment, you can type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n:::\n\n\nYou may also see these objects at the top right corner of the R Studio interface.\n\nIf you no longer need one or more of these objects, you can remove them.  For instance, if you are done with Data, you can type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(Data)\n```\n:::\n\n\nThen `Data` will no longer be in your current R environment.  When you quit R, if you wish to keep all the new objects in your current R environment, be sure to answer `Yes` when asked, `Save workspace image?`\n\n### Scatter plots and simple linear regression\n\nSuppose the data for Problem 19 of Chapter One has been stored in an R object named Data which has two columns, the first column named `GPA` and the second column named `ACT`. You want to make a scatterplot in R with `ACT` scores on the horizontal axis and `GPA` on the vertical axis.  The R command is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Data$ACT, Data$GPA)\n```\n:::\n\n\nNote that the dollar sign is used to reference either column in the table named Data.  The first argument to the `plot()` function is the column corresponding to the variable associated with the horizontal axis, and the second argument is the column corresponding to the variable associated with the vertical axis.  Alternately, you could define two new vector variables, `X` and `Y`, to hold the data of the individual columns, and use these vectors as the arguments to the `plot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- Data$ACT\nY <- Data$GPA\nplot(X, Y)\n```\n:::\n\n\nFor now we will stick with the former approach.  The resulting plot appears in the R Graphics Device within the R interface.  Click on it to view it, save it, print it, etc.  \n\nNote that whenever you make a new plot the old one will disappear (this can be changed; but not easily), so save it if you don’t want to lose it.  However, the current scatterplot is inadequate.  It has no title, the axis labels aren’t very informative, and the points are open circles rather than dark filled-in circles.  To fix this, we can add some additional settings to the `plot()` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Data$ACT, Data$GPA, main=\"Problem 1.19\", xlab=\"ACT Test Score\", ylab=\"Freshman GPA\", pch=19)\n```\n:::\n\n\nNow we obtain a much nicer scatterplot.\n\nWhatever you put in quotes after `main =` will be the title for the plot.  Whatever you put in quotes after `xlab =` and `ylab =` will the the labels for the horizontal and vertical axes, respectively. The number after `pch =` is a code for the symbol to use for the points.  You can try other numbers from 1 to 25. You can also use any symbol on your keyboard for the points, including numerals and letters, using quotes.  For instance, if you want to use an asterisk for the points, type `pch=\"*\"`.\n\nYou may want to also add a plot of the estimated regression function to the scatterplot of the data.   This assumes you have already obtained the least squares estimates of the regression coefficients (see “Simple Linear Regression in R”).  \n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- lm(Data$GPA ~ Data$ACT)\nfit <- lm(GPA~ACT, data=Data)   # another option\nplot(Data$ACT, Data$GPA, main=\"Problem 1.19\", xlab=\"ACT Test Score\", ylab=\"Freshman GPA\", pch=19)\nabline(fit, col = \"red\", lwd = 2) #lwd is for line-width\n```\n:::\n\n\nThe line will appear superimposed over the data. You can also just type the actual values for the estimated intercept and slope if you prefer.\n\nYou may also use [ggplot2](https://ggplot2-book.org/) to make plots if you wish. `ggplot()` has a more intuitive syntax as it is based on the Grammar of Graphics, and also has more sophisticated formatting options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(Data, aes(x = ACT, y = GPA))+\n  geom_point()+\n  labs(\n    title = \"Problem 1.19\"\n  )\n```\n\n::: {.cell-output-display}\n![](Rintro_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nTo save your plot, click anywhere on the plot, then on the menu bar choose `File`, then `Save as`.  Choose the format in which you want to save the plot, then where you want to save it on your drive.\n\nCheck the estimates for the intercept and slope:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = GPA ~ ACT, data = Data)\n\nCoefficients:\n(Intercept)          ACT  \n    2.11405      0.03883  \n```\n:::\n:::\n\n\nCompute fitted values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit$fitted.values \n```\n:::\n\n\nCompute residuals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit$residuals\n```\n:::\n\n\nCompute the estimate of $\\sigma^2$, that is, the MSE: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- dim(Data)[1]\nsum(fit$residuals^2)/(n-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3882848\n```\n:::\n:::\n\n\n## Formatting *\\*.qmd* file:  \n \nBefore Quarto, *\\*.Rmd* files were commonly used to render HTML files with R code and formatted-text. This [Cheatsheet](https://rmarkdown.rstudio.com/lesson-15.html) is for formatting *\\*.Rmd* files. However, you may use it to format *\\*.qmd* files as well.\n\t\n## Some references about using R:\n\n1) 100 page Introduction to R from the R website  \t\t\t<http://www.ics.uci.edu/~jutts/st108/R-intro.pdf>\n\n2) Practical Regression and Anova using R, by Julian Faraway\n\t<http://cran.r-project.org/doc/contrib/Faraway-PRA.pdf>\n\n3) R code by Bryan Goodrich for Kutner et al., Applied Linear Statistical Models 5th ed: <https://rpubs.com/bryangoodrich>\n\n\n\n",
    "supporting": [
      "Rintro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}